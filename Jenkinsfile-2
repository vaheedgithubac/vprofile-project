pipeline {
  agent any                            // { label 'linux' }
  tools { jdk 'JDK-11'
          maven 'maven-397'
        }
  options { skipDefaultCheckout true
            timestamps()
            }
  stages {

    stage('CLEAN WORKSPACE') {
         steps { 
          sh 'mvn --version'
          echo 'Cleaning up WORKSPACE before Pipeline Start executing...!!!'
          cleanWs() 
       } 
      post {
             success {
                    echo 'WORKSPACE cleaned up Successfully...!!!'
                }
            }
    }

    stage('CODE CHECKOUT') {
         steps { 
           // git branch:'main', url:'https://github.com/vaheedgithubac/vprofile-project.git'
           checkout scm 
       } 
     }

    stage('Check') {
         steps { 
           echo "WORKSPACE: ${env.WORKSPACE}"
           echo "JOB_NAME: ${env.JOB_NAME}"
           echo "JOB_BASE_NAME: ${env.JOB_BASE_NAME}"
           echo "BUILD_URL: ${env.BUILD_URL}"
           echo "PWD: $pwd"
       } 
     }

    stage('GITLEAKS SCAN') {
      // agent any
      steps {
                catchError(buildResult: 'UNSTABLE', message: 'ERROR', stageResult: 'FAILURE') {
                echo "${pwd}/workspace/${env.JOB_BASE_NAME}"
                sh "docker run -v ${env.WORKSPACE}:/path -w /path zricethezav/gitleaks:latest detect --source . --verbose -f json -r gitleaks.json"
             }
      } 
     post {
            always {
                     script {
                              if (fileExists('gitleaks.json')) { 
                                  echo 'Generated GITLEAKS Scan Analysis Result...!!!'
                                  echo 'Uploading GITLEAKS Scan Analysis Result to DEFECT DOJO...!!!'
                                  sh 'python3 upload-reports.py gitleaks.json'
                              } 
                                    else { echo 'Unable to generate GITLEAKS Scan Analysis Report...!!!' } 
                            }
                   }
          }
     }

     stage('UNIT TEST'){
            steps {
                sh 'mvn test'
            }
        }

     stage ('CODE COVERAGE - JACOCO') {
        steps { sh 'mvn org.jacoco:jacoco-maven-plugin:0.8.4:prepare-agent' }
       post {
              always {
                       script {
                                if (fileExists('target/jacoco.exec')) { echo 'Generated JACOCO CODE COVERAGE Scan Analysis Report...!!!' } 
                                else { echo 'Unable to generate JACOCO CODE COVERAGE Scan Analysis Report...!!!' } 
                              }
                     }
          }
        }
   

    stage('TRIVY FILESYSTEM SCAN') {
      // agent any
      steps {
                catchError(buildResult: 'UNSTABLE', message: 'ERROR', stageResult: 'FAILURE') {
                echo "${pwd}/workspace/${env.JOB_BASE_NAME}"
                sh "docker run -v ${env.WORKSPACE}:/path -w /path aquasec/trivy:latest fs . -f json -o /path/trivyfs.json --severity LOW,MEDIUM,HIGH,CRITICAL"
             }
      } 
     post {
            always {
                     script {
                              if (fileExists('trivyfs.json')) { 
                                 echo 'Generated TRIVY FILESYSTEM SCAN Analysis Report...!!!' 
                                 echo 'Uploading TRIVY FILESYSTEM SCAN Analysis Report to DEFECT DOJO...!!!'
                                 sh 'python3 upload-reports.py trivyfs.json'
                              } 
                              else { echo 'Unable to generate TRIVY FILESYSTEM SCAN Analysis Result...!!!' } 
                            }
                   }
          }
     }
/*
   stage('SCA - OWASP DEPENDENCY CHECK') {
          steps {
                dependencyCheck additionalArguments: ' --scan . ', odcInstallation: 'DC'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }

            post {
                always {
                         script {
                              if (fileExists('dependency-check-report.xml')) { 
                                  echo 'Generated OWASP DEPENDENCY CHECK SCAN Analysis Report...!!!' 
                                  echo 'Uploading OWASP DEPENDENCY CHECK SCAN Analysis Report to DEFECT DOJO...!!!'
                                  sh 'python3 upload-reports.py dependency-check-report.xml'
                              } 
                              else { echo 'Unable to generate OWASP DEPENDENCY CHECK SCAN Analysis Result...!!!' } 
                            }
                }
            }
        }

  stage('CODE ANALYSIS - SONARQUBE') {
          
      environment {
             scannerHome = tool 'sonarscanner4'
          }

          steps {
            withSonarQubeEnv('sonar-server') {
               sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=vprofile-repo \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportPaths=target/surefire-reports/ \
                   -Dsonar.jacoco.reportPaths=target/jacoco.exec \
                  // -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
            }
            
          }
        }

  stage('Quality Gate Check') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    script {
                        def qualityGateStatus = waitForQualityGate()

                        if (qualityGateStatus == 'OK') {
                            echo 'Quality gate passed! Proceeding with the pipeline...!!!'
                        } else {
                            error 'Quality gate failed. Stopping the pipeline...!'
                        }
                    }
                }
            }
        }  */

} // stages

} //pipeline
